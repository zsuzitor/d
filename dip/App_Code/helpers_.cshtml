@using System.Web.Mvc;
@using dip.Models.Domain;

@*@functions
{
    private static new HtmlHelper<object> Html
    {
        get { return ((WebViewPage)CurrentPage).Html; }
    }

    private static UrlHelper Url
    {
        get { return ((WebViewPage)CurrentPage).Url; }
    }
}*@

@helper HelperName(string name)
{
// your helper can contain code and/or markup, e.g.
// var msg = "Hello " + name;
// <p>@msg</p>
// For more information, visit http://go.microsoft.com/fwlink/?LinkID=204658
}


@*@helper PrintAsRaw(string htmlString)
{
    @Html.Raw(htmlString)
    
}*@


@*dynamic*@
@*HtmlHelper*@
@* отрисовывает форму(a) для дескрипторного поиска, форма уже заполнена и выбраны нужные параметры(param) *@
@helper PartFormDescrSearch(dip.Models.ViewModel.DescriptionForm a, string type = "", DescrSearchI param=null)
{
//using System.Web.Mvc ;
    <div class="form-horizontal">

        <hr />
        @*@( +a.Postfix)*@
        <div class="form-group">
            <label id=@("actionLabel"+type) class="control-label col-md-2" value="@a.currentActionId">Название воздействия</label>
            @*@Html.Label("Название воздействия", new { id = "actionLabel", @class = "control-label col-md-2" })*@

           


            <div class="col-md-10">

                @*@Html.DropDownList("actionId" + type, null, htmlAttributes: new { id = "action" + type, @class = "form-control" })*@


                <select name=@("actionId"+ type) class="form-control" id=@("action"+type)>
                    
                    
                    @for (var i=0;i< a.actionId.Count;++i)
                    {
                        if (param?.actionId == a.actionId[i].Id)
                        {
                            <option selected value="@a.actionId[i].Id">@a.actionId[i].Name</option>
                        }
                        else
                        {
                            <option value="@a.actionId[i].Id">@a.actionId[i].Name</option>
                        }

                    }
                </select>


            </div>
        </div>
        <div class="form-group">
            <label id="" class="control-label col-md-2">Тип входа</label>
            @*@Html.Label("Тип входа", new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                <select name=@("actionType"+ type) class="form-control" id=@("actionType"+type)>
                    @for (var i=0;i<a.actionType.Count;++i)
                    {
                        
                        if (param?.actionType == a.actionType[i].Id)
                        {
                            <option selected value="@a.actionType[i].Id">@a.actionType[i].Name</option>
                        }
                        else
                        {
                            <option value="@a.actionType[i].Id">@a.actionType[i].Name</option>
                        }



                    }
                </select>

            </div>
        </div>
        <div id=@("fizVelGroup"+ type)>

            @helpers_.DescrFormFizVels(type, a.fizVelId, param)
        </div>

        @helpers_.DescrFormParamFizVels(type, a.parametricFizVelId, param )
        @if (a.pros.Count > 0)
        {
            <label class="control-label col-md-2">Пространственные характеристики</label>
            <div id=@("prosGroup"+type)>
                @*<div class="form-group" id=@("pros" + type)>*@

                @helpers_.DescrFormPros(type, a.pros, param)
                @*</div>*@
            </div>
        }
        @if (a.spec.Count > 0)
        {
            <label class="control-label col-md-2">Специальные характеристики</label>
            <div id=@("specGroup"+type)>

                @helpers_.DescrFormSpec(type, a.spec, param)
            </div>
        }
       @if (a.vrem.Count > 0)
       {
        <label class="control-label col-md-2">Временные характеристики</label>
            <div id=@("vremGroup"+type)>
                @helpers_.DescrFormVrem(type, a.vrem, param)
            </div>
       }

        @*<div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" name="nameOfButton" value="Отмена" class="btn btn-default" />
                    <input type="submit" name="nameOfButton" value="Далее" class="btn btn-default" />
                </div>
            </div>*@
    </div>







}


@helper DescrFormFizVels(string type, List<FizVel> fizVelId, DescrSearchI param = null)
{

    <div class="form-group" id=@("fizVel"+type)>
        @if (param?.actionId != "VOZ11")
    {
            @*@Html.LabelFor(model => model.FizVelId, "Название физической величины", htmlAttributes: new { @class = "control-label col-md-2" })*@
            <label class="control-label col-md-2">Название физической величины</label>
        }
        else
        {
            @*@Html.LabelFor(model => model.FizVelId, "Раздел физики", htmlAttributes: new { @class = "control-label col-md-2" })*@
            <label class="control-label col-md-2">Раздел физики</label>
        }
        <div class="col-md-10">
            @*@Html.DropDownList("fizVelId"+ ((string)ViewBag.type), null, htmlAttributes: new { id = "fizVelId"+ ((string)ViewBag.type), @class = "form-control" })*@
            <select name=@("fizVelId"+ type) class="form-control" id=@("fizVelId"+ type)>

                @foreach (var i in fizVelId)
                {
                    if (param?.FizVelId == i.Id)
                    {
                        <option selected value="@i.Id">@i.Name</option>
                    }
                    else
                    {
                        <option value="@i.Id">@i.Name</option>
                    }


                }

            </select>





            @*@Html.ValidationMessageFor(model => model.FizVelId, "", new { @class = "text-danger" })*@
        </div>
    </div>



@*TODO   тут ошибка из за которой было принято решение все хелперы переписать под отдельный контроллер
        ошибка при выводе любого html кода - "Коллекция была изменена; невозможно выполнить операцию перечисления"
        //{
    //    System.Threading.Thread.Sleep(10000);
    //}
    //    {
    //        FizVel[] fizVelId1 = fizVelId?.ToArray();
    //    }
    try
    {
            <div class="form-group" id=@("fizVel" + type)>

                @if (param?.actionId != "VOZ11")
            {

                    <label class="control-label col-md-2">Название физической величины</label>
                }
                else
                {

                    <label class="control-label col-md-2">Раздел физики</label>
                }


                <div class="col-md-10">



                </div>
            </div>
            <div></div>
        }

        catch
        {
            var th = fizVelId;
            var hhg = th.ToArray();
            var gg = 10;
        }*@
}



@helper DescrFormParamFizVels(string type, List<FizVel> parametricFizVelId, DescrSearchI param = null)
{
    <div class="form-group" id=@("parametricFizVel"+type)>
        @if (parametricFizVelId != null && parametricFizVelId.Count != 0)
        {
            @*@Html.Label("Название физической величины", htmlAttributes: new { @class = "control-label col-md-2" })*@
            <label class="control-label col-md-2">Название физической величины</label>
            <div class="col-md-10">
                @*@Html.DropDownList("parametricFizVelId"+ ((string)ViewBag.type), ViewBag.parametricFizVelId as SelectList, htmlAttributes: new { @class = "form-control" })*@

                <select name=@("parametricFizVelId"+ type) class="form-control" id=@("parametricFizVelId"+ type)>
                    @*<option value="NO_FIZVEL">Не выбрано</option>*@
                    
                    @for (var i =0;i< parametricFizVelId.Count;++i)
                    {

                        if (param?.parametricFizVelId == parametricFizVelId[i].Id)
                        {
                            <option selected value="@parametricFizVelId[i].Id">@parametricFizVelId[i].Name</option>
                        }
                        else
                        {
                            <option value="@parametricFizVelId[i].Id">@parametricFizVelId[i].Name</option>
                        }

                        
                    }

                </select>

            </div>
        }
    </div>
}

@*@helper DescrFormVremCheckBoxes(string type, List<Vrem> vrems, DescrSearchI param = null)
{



}*@

@helper DescrFormVrem(string type, List<Vrem> vrems, DescrSearchI param = null)
{
    <div class="form-group descrCheckBoxChild" @*id=@("vrem"+type)*@>
        @if (vrems!= null && vrems.Count != 0)
        {
          
            <div class="col-md-10">
               
                        @{
                            
                            for (var vrem=0; vrem < vrems.Count;++vrem)
                            {
                                <div>


                                    @*<input id=@("listSelectedVrem"+((string)ViewBag.type)+cnt) type="checkbox" name=@("listSelectedVrem"+((string)ViewBag.type)) value="@vrem.Id" /> @vrem.Name*@
                                    @{ 
                                        bool? needSelected = param?.listSelectedVrem?.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries)?.Contains(vrems[vrem].Id);

                                    }
                                    
                                    @if (needSelected==true)
                                    {
                                    <input class="checkBoxClass" type="checkbox" @*id=@("listSelectedVrem"+type+cnt)*@ checked name=@("listSelectedVrem"+type) value="@vrems[vrem].Id" /> @vrems[vrem].Name
                                    }
                                    else
                                    {
                                    <input class="checkBoxClass" type="checkbox" @*id=@("listSelectedVrem"+type+cnt)*@ name=@("listSelectedVrem"+type) value="@vrems[vrem].Id" /> @vrems[vrem].Name
                                    }
                                    <div id="@(vrems[vrem].Id+type)" name="0">
                                        @if (vrems[vrem].Childs.Count > 0)
                                        {
                                            @helpers_.DescrFormVrem(type, vrems[vrem].Childs, param)
                                        }

                                    </div>

                                </div>
                            }


                        }
                    
                </div>
                            }
    </div>



}





@helper DescrFormSpec(string type,List<Spec> specs, DescrSearchI param = null)
{
    <div class="form-group descrCheckBoxChild" @*id=@("spec"+type)*@>
        @if (specs!= null && specs.Count != 0)
        {
           
            <div class="col-md-10">
                
                        @{
                                
                            for (var spec = 0; spec < specs.Count;++spec)
                                {
                                <div>
                                    @{
                                        bool? needSelected = param?.listSelectedSpec?.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries)?.Contains(specs[spec].Id);

                                    }


                                    @if (needSelected==true)
                                    {
                                    <input class="checkBoxClass" type="checkbox" @*id=@("listSelectedSpec"+type+cnt)*@ checked name=@("listSelectedSpec"+type) value="@specs[spec].Id" /> @specs[spec].Name
                                    }
                                    else
                                    {
                                    <input class="checkBoxClass" type="checkbox" @*id=@("listSelectedSpec"+type+cnt)*@ name=@("listSelectedSpec"+type) value="@specs[spec].Id" /> @specs[spec].Name
                                    }



                                    <div id="@(specs[spec].Id+type)" name="0">
                                        @if (specs[spec].Childs.Count > 0)
                                        {
                                            @helpers_.DescrFormSpec(type, specs[spec].Childs, param)
                                        }
                                    </div>
                                </div>
                            }

                        }
                   
                </div>
                            }
    </div>
}




@helper DescrFormPros(string type,List<Pro> pros, DescrSearchI param = null)
{
    <div class="form-group descrCheckBoxChild" @*id=@("pros" + type)*@>
        @if (pros != null && pros.Count != 0)
        {
            
            <div class="col-md-10">
               
                        @{
                            
                            for (var pro=0; pro< pros.Count;++pro)
                            {
                                <div>
                                    @*<input id=@("listSelectedPros"+type+cnt) type="checkbox" name=@("listSelectedPros"+type) value="@pro.Id" /> @pro.Name*@
                                    @{
                                        bool? needSelected = param?.listSelectedPros?.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries)?.Contains(pros[pro].Id);
                                    }
                                        @if (needSelected == true)
                                    {
                                    <input @*id=@("listSelectedPros"+type+cnt)*@ class="checkBoxClass" type="checkbox" checked name=@("listSelectedPros" + type) value="@pros[pro].Id" /> @pros[pro].Name
                                    }
                                    else
                                    {
                                    <input @*id=@("listSelectedPros"+type+cnt)*@ class="checkBoxClass" type="checkbox" name=@("listSelectedPros" + type) value="@pros[pro].Id" /> @pros[pro].Name
                                    }


                                    <div id="@(pros[pro].Id + type)" name="0">
                                        @if (pros[pro].Childs.Count > 0)
                                        {
                                            @helpers_.DescrFormPros(type, pros[pro].Childs, param)
                                        }
                                    </div>
                                </div>
                            }

                        }
                  
                </div>
                            }
    </div>


                            }




@*TODO     не помню зачем это нужно и нужно ли вообще*@
@helper selectList(dynamic a, string label, string id, string name)
{

    <div class="form-group" id="@id">
        @if (a.Count != 0)
    {
            <label id="" class="control-label col-md-2">@label</label>
            @*@Html.Label(label, new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                <table class="descrFormGroupCheckBox">
                    <tr>
                        @{
                            int cnt = 0;
                            foreach (var item in a)
                            {
                                if (cnt++ % 3 == 0)
                                {
                                    @:</tr><tr>
                            }
                                
                                <td>
                                    <input type="checkbox" class="checkBoxClass" name=@("listSelected"+@name) value="@item.Id" /> @item.Name
                                    <div id="@item.Id" name="0"></div>
                                </td>
                            }
                            @:</tr>
                        }
                    </table>
                </div>
                            }
    </div>


}








@helper ImageLink(Image a)
{
  
if (a?.Id != null)
{
    <div id="LinkImageForLoad_id_@a.Id" class="div_image_standart div_load_open_img" onclick="ShowImageRecordAJAX(@a.Id)">@*@a.Id*@
        
        @helpers_.Image(a, true)
        
    </div>
}
if (a?.Id == null)
{
    @helpers_.Image(a, true)
}

}



@helper Image(Image a, bool show_empty_img)
        {
if (a?.Data != null)
{
    //TODO сейчас  не полностью картинки влезают
    <div class="out_main_tag_one_img_cl" id="out_main_tag_one_img_id_@a.Id">
       
        <div id="main_tag_one_img_id_@a.Id" class="class_image_standart" style="background:url( data:image/jpeg;base64,@Convert.ToBase64String(a.Data))
              no-repeat; background-position: center;background-size: contain;">
            
        </div>
    </div>
}
    
    if (show_empty_img)
    {


        if (a?.Data == null)
        {
            <img src="~/Content/images/camera_200.png" />
            }
        }
    }





    